# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  # ステージング環境からイメージをコピー
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: copy-image-to-prod
    entrypoint: /bin/bash
    args:
      - -c
      - |
        echo "ステージング環境からイメージをコピー中..."
        gcloud container images add-tag \
          ${_STAGING_PROJECT_ID}/${_REPOSITORY_NAME}/frontend:${COMMIT_SHA} \
          ${_REGION}-docker.pkg.dev/${_PROD_PROJECT_ID}/${_REPOSITORY_NAME}/frontend:${COMMIT_SHA} \
          --quiet
        
        gcloud container images add-tag \
          ${_STAGING_PROJECT_ID}/${_REPOSITORY_NAME}/frontend:${COMMIT_SHA} \
          ${_REGION}-docker.pkg.dev/${_PROD_PROJECT_ID}/${_REPOSITORY_NAME}/frontend:latest \
          --quiet
        
        echo "✅ イメージコピー完了"
    timeout: '300s'

  # Blue-Greenデプロイ準備（トラフィック0%で新リビジョンをデプロイ）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: deploy-frontend-prod-no-traffic
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_PROJECT_NAME}-frontend'
      - '--image=${_REGION}-docker.pkg.dev/${_PROD_PROJECT_ID}/${_REPOSITORY_NAME}/frontend:${COMMIT_SHA}'
      - '--region=${_REGION}'
      - '--project=${_PROD_PROJECT_ID}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--set-env-vars=NEXT_PUBLIC_API_MODE=production,NEXT_PUBLIC_AGENT_ENGINE_URL=https://us-central1-${_PROD_PROJECT_ID}.cloudfunctions.net/agent-engine-stream,NEXT_PUBLIC_CLOUD_FUNCTIONS_URL=https://${_REGION}-${_PROD_PROJECT_ID}.cloudfunctions.net/image-recognition,NODE_ENV=production,NEXT_PUBLIC_FIREBASE_API_KEY=${_FIREBASE_API_KEY},NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${_FIREBASE_AUTH_DOMAIN},NEXT_PUBLIC_FIREBASE_PROJECT_ID=${_FIREBASE_PROJECT_ID},NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${_FIREBASE_STORAGE_BUCKET},NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${_FIREBASE_MESSAGING_SENDER_ID},NEXT_PUBLIC_FIREBASE_APP_ID=${_FIREBASE_APP_ID}'
      - '--max-instances=100'
      - '--min-instances=1'
      - '--memory=2Gi'
      - '--cpu=2'
      - '--port=3000'
      - '--timeout=300'
      - '--no-traffic'  # 新リビジョンにトラフィックは流さない
      - '--tag=candidate'  # 検証用タグ
    timeout: '600s'

  # 新リビジョンのヘルスチェック
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: health-check-candidate
    entrypoint: /bin/bash
    args:
      - -c
      - |
        # candidate URLを取得
        CANDIDATE_URL=$(gcloud run services describe ${_PROJECT_NAME}-frontend \
          --region=${_REGION} --project=${_PROD_PROJECT_ID} \
          --format="value(status.traffic.find(tag=candidate).url)")
        
        echo "候補リビジョンのヘルスチェック: $CANDIDATE_URL"
        
        # ヘルスチェック実行
        for i in {1..10}; do
          if curl -f -s -m 30 "$CANDIDATE_URL" > /dev/null; then
            echo "✅ 候補リビジョンのヘルスチェック成功"
            break
          else
            echo "⏳ ヘルスチェック待機中... ($i/10)"
            sleep 15
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ ヘルスチェック失敗"
            exit 1
          fi
        done
    timeout: '600s'

  # 段階的トラフィック移行（10%）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: gradual-traffic-10
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - '${_PROJECT_NAME}-frontend'
      - '--region=${_REGION}'
      - '--project=${_PROD_PROJECT_ID}'
      - '--to-tags=candidate=10'
    timeout: '300s'

  # 10%トラフィックでの監視待機
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: monitor-10-percent
    entrypoint: /bin/bash
    args:
      - -c
      - |
        echo "⏳ 10%トラフィックで2分間監視中..."
        sleep 120
        echo "✅ 10%監視完了"
    timeout: '180s'

  # 段階的トラフィック移行（50%）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: gradual-traffic-50
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - '${_PROJECT_NAME}-frontend'
      - '--region=${_REGION}'
      - '--project=${_PROD_PROJECT_ID}'
      - '--to-tags=candidate=50'
    timeout: '300s'

  # 50%トラフィックでの監視待機
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: monitor-50-percent
    entrypoint: /bin/bash
    args:
      - -c
      - |
        echo "⏳ 50%トラフィックで3分間監視中..."
        sleep 180
        echo "✅ 50%監視完了"
    timeout: '240s'

  # 完全切り替え（100%）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: complete-traffic-switch
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - '${_PROJECT_NAME}-frontend'
      - '--region=${_REGION}'
      - '--project=${_PROD_PROJECT_ID}'
      - '--to-latest'
    timeout: '300s'

  # 最終デプロイ確認
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: verify-final-deployment
    entrypoint: /bin/bash
    args:
      - -c
      - |
        URL=$(gcloud run services describe ${_PROJECT_NAME}-frontend --region=${_REGION} --project=${_PROD_PROJECT_ID} --format="value(status.url)")
        echo "本番フロントエンドURL: $URL"
        
        # 最終ヘルスチェック
        for i in {1..5}; do
          if curl -f -s -m 30 "$URL" > /dev/null; then
            echo "✅ 本番フロントエンドデプロイ成功: $URL"
            break
          else
            echo "⏳ 最終確認待機中... ($i/5)"
            sleep 10
          fi
        done
        
        # デプロイ完了通知
        echo "_________________________________________________________________________"
        echo "🎉 フロントエンド本番環境デプロイ完了!"
        echo "URL: $URL"
        echo "プロジェクト: ${_PROD_PROJECT_ID}"
        echo "リージョン: ${_REGION}"
        echo "コミット: $COMMIT_SHA"
        echo "デプロイ方式: Blue-Green (段階的トラフィック移行)"
        echo "_________________________________________________________________________"
    timeout: '300s'

substitutions:
  _PROD_PROJECT_ID: YOUR_PROD_PROJECT_ID
  _STAGING_PROJECT_ID: YOUR_STAGING_PROJECT_ID
  _REGION: us-central1
  _REPOSITORY_NAME: kids-food-advisor-frontend
  _PROJECT_NAME: kids-food-advisor
  # Firebase設定（本番環境）
  # これらの値はCI/CDで実際の値に置き換えられます
  _FIREBASE_API_KEY: YOUR_FIREBASE_API_KEY
  _FIREBASE_AUTH_DOMAIN: YOUR_FIREBASE_AUTH_DOMAIN
  _FIREBASE_PROJECT_ID: YOUR_FIREBASE_PROJECT_ID
  _FIREBASE_STORAGE_BUCKET: YOUR_FIREBASE_STORAGE_BUCKET
  _FIREBASE_MESSAGING_SENDER_ID: YOUR_FIREBASE_MESSAGING_SENDER_ID
  _FIREBASE_APP_ID: YOUR_FIREBASE_APP_ID

logsBucket: gs://${PROJECT_ID}-kids-food-advisor-logs-data/build-logs
options:
  substitutionOption: ALLOW_LOOSE
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '3600s' # 60分