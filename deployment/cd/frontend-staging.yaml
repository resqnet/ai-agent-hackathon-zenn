# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  # 依存関係インストール
  - name: 'node:18-alpine'
    id: install-frontend-dependencies
    entrypoint: npm
    args: ['ci']
    timeout: '300s'

  # 型生成（スキップ - 既存の型ファイルを使用）
  - name: 'node:18-alpine'
    id: generate-api-types
    entrypoint: /bin/sh
    args: ['-c', 'echo "型生成をスキップ - 既存ファイルを使用"']
    timeout: '30s'

  # ビルド
  - name: 'node:18-alpine'
    id: build-frontend
    entrypoint: /bin/sh
    args: 
      - '-c'
      - |
        echo "Starting Next.js build..."
        npm run build-ci 2>&1 || {
          echo "Build failed. Checking for TypeScript errors..."
          npx tsc --noEmit 2>&1 || true
          exit 1
        }
    env:
      - 'NEXT_PUBLIC_API_MODE=staging'
      - 'NEXT_PUBLIC_AGENT_ENGINE_URL=https://us-central1-${_STAGING_PROJECT_ID}.cloudfunctions.net/agent-engine-stream'
      - 'NEXT_PUBLIC_CLOUD_FUNCTIONS_URL=https://${_REGION}-${_STAGING_PROJECT_ID}.cloudfunctions.net/image-recognition'
      - 'NODE_ENV=production'
      - 'NEXT_TELEMETRY_DISABLED=1'
      # Firebase認証設定（ステージング環境）
      - 'NEXT_PUBLIC_FIREBASE_API_KEY=${_FIREBASE_API_KEY}'
      - 'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${_FIREBASE_AUTH_DOMAIN}'
      - 'NEXT_PUBLIC_FIREBASE_PROJECT_ID=${_FIREBASE_PROJECT_ID}'
      - 'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${_FIREBASE_STORAGE_BUCKET}'
      - 'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${_FIREBASE_MESSAGING_SENDER_ID}'
      - 'NEXT_PUBLIC_FIREBASE_APP_ID=${_FIREBASE_APP_ID}'
    timeout: '600s'

  # Dockerイメージビルド＆プッシュ
  - name: 'gcr.io/kaniko-project/executor:latest'
    id: build-and-push-frontend-image
    args:
      - '--dockerfile=Dockerfile'
      - '--context=/workspace'
      - '--destination=${_REGION}-docker.pkg.dev/${_STAGING_PROJECT_ID}/kids-food-advisor-frontend/frontend:${COMMIT_SHA}'
      - '--destination=${_REGION}-docker.pkg.dev/${_STAGING_PROJECT_ID}/kids-food-advisor-frontend/frontend:latest'
      - '--cache=true'
      - '--use-new-run'
    timeout: '900s'

  # Cloud Runにデプロイ
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: deploy-frontend-staging
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_PROJECT_NAME}-frontend'
      - '--image=${_REGION}-docker.pkg.dev/${_STAGING_PROJECT_ID}/kids-food-advisor-frontend/frontend:${COMMIT_SHA}'
      - '--region=${_REGION}'
      - '--project=${_STAGING_PROJECT_ID}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--set-env-vars=NEXT_PUBLIC_API_MODE=staging,NEXT_PUBLIC_AGENT_ENGINE_URL=https://us-central1-${_STAGING_PROJECT_ID}.cloudfunctions.net/agent-engine-stream,NEXT_PUBLIC_CLOUD_FUNCTIONS_URL=https://${_REGION}-${_STAGING_PROJECT_ID}.cloudfunctions.net/image-recognition,NODE_ENV=production,NEXT_PUBLIC_FIREBASE_API_KEY=${_FIREBASE_API_KEY},NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${_FIREBASE_AUTH_DOMAIN},NEXT_PUBLIC_FIREBASE_PROJECT_ID=${_FIREBASE_PROJECT_ID},NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${_FIREBASE_STORAGE_BUCKET},NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${_FIREBASE_MESSAGING_SENDER_ID},NEXT_PUBLIC_FIREBASE_APP_ID=${_FIREBASE_APP_ID}'
      - '--max-instances=10'
      - '--memory=1Gi'
      - '--cpu=1'
      - '--port=8080'
      - '--timeout=300'
    timeout: '600s'

  # デプロイ確認
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: verify-frontend-deployment
    entrypoint: /bin/bash
    args:
      - -c
      - |
        SERVICE_URL=$(gcloud run services describe ${_PROJECT_NAME}-frontend --region=${_REGION} --project=${_STAGING_PROJECT_ID} --format="value(status.url)")
        echo "フロントエンドURL: $$SERVICE_URL"
        
        # ヘルスチェック
        for i in {1..5}; do
          if curl -f -s "$$SERVICE_URL" > /dev/null; then
            echo "✅ フロントエンドデプロイ成功: $$SERVICE_URL"
            break
          else
            echo "⏳ フロントエンド起動待機中... ($i/5)"
            sleep 10
          fi
        done
    timeout: '300s'


  # デプロイ結果出力
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: output-deployment-info
    entrypoint: /bin/bash
    args:
      - -c
      - |
        SERVICE_URL=$(gcloud run services describe ${_PROJECT_NAME}-frontend --region=${_REGION} --project=${_STAGING_PROJECT_ID} --format="value(status.url)")
        echo "_________________________________________________________________________"
        echo "🚀 フロントエンドステージング環境デプロイ完了!"
        echo "URL: $$SERVICE_URL"
        echo "プロジェクト: ${_STAGING_PROJECT_ID}"
        echo "リージョン: ${_REGION}"
        echo "コミット: ${COMMIT_SHA}"
        echo "_________________________________________________________________________"
        echo "ステージング環境でのテストを実施し、問題がなければ"
        echo "本番デプロイは別途 'make deploy-frontend-prod' で実行してください。"
        echo "_________________________________________________________________________"

substitutions:
  _STAGING_PROJECT_ID: YOUR_STAGING_PROJECT_ID
  _REGION: us-central1
  _REPOSITORY_NAME: kids-food-advisor-frontend
  _PROJECT_NAME: kids-food-advisor
  # Firebase設定（ステージング環境）
  # これらの値はCI/CDで実際の値に置き換えられます
  _FIREBASE_API_KEY: YOUR_FIREBASE_API_KEY
  _FIREBASE_AUTH_DOMAIN: YOUR_FIREBASE_AUTH_DOMAIN
  _FIREBASE_PROJECT_ID: YOUR_FIREBASE_PROJECT_ID
  _FIREBASE_STORAGE_BUCKET: YOUR_FIREBASE_STORAGE_BUCKET
  _FIREBASE_MESSAGING_SENDER_ID: YOUR_FIREBASE_MESSAGING_SENDER_ID
  _FIREBASE_APP_ID: YOUR_FIREBASE_APP_ID

options:
  substitutionOption: ALLOW_LOOSE
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '2400s' # 40分