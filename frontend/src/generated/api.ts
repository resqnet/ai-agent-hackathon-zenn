/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Kids Food Advisor Agent Engine Stream API
 * # Kids Food Advisor Agent Engine Stream API

## Ê¶ÇË¶Å
Vertex AIÁµ±Âêà„Å´„Çà„Çã1Ê≠≥Âçä„Äú3Ê≠≥ÂπºÂÖêÂêë„ÅëÊ†ÑÈ§äÁõ∏Ë´á„Ç∑„Çπ„ÉÜ„É†„ÅÆREST APIÔºàAgent Engine StreamÁâàÔºâ

## ‰∏ª„Å™Ê©üËÉΩ
- **„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„ÉÅ„É£„ÉÉ„Éà**: „É™„Ç¢„É´„Çø„Ç§„É†„Å™„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂØæË©±
- **„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ**: ‰ºöË©±Â±•Ê≠¥„ÅÆ‰ΩúÊàê„ÉªÂèñÂæó„ÉªÂâäÈô§
- **FirebaseË™çË®º**: ÂÖ®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅßFirebase AuthenticationÂøÖÈ†à

## ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ
- **AI Engine**: Google Vertex AI + Gemini 2.0 Flash
- **Framework**: Cloud Functions + Google ADK (Agent Development Kit)
- **ÂØæË±°Âπ¥ÈΩ¢**: 1Ê≠≥Âçä„Äú3Ê≠≥„ÅÆÂπºÂÖê

 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../utils/api-mutator";
/**
 * @nullable
 */
export type ApiResponseData = { [key: string]: unknown } | null;

export interface ApiResponse {
  success: boolean;
  /** @nullable */
  data?: ApiResponseData;
  /** @nullable */
  error?: string | null;
}

export interface ChatRequest {
  /** „É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ */
  message: string;
  /**
   * „Çª„ÉÉ„Ç∑„Éß„É≥IDÔºàÁúÅÁï•ÂèØËÉΩÔºâ
   * @nullable
   */
  sessionId?: string | null;
}

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã
 * @nullable
 */
export type VertexAISessionSessionState = { [key: string]: unknown } | null;

export interface VertexAISession {
  /** „Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÂÆåÂÖ®„Å™„É™„ÇΩ„Éº„ÇπÂêç */
  name: string;
  /** ‰ΩúÊàêÊó•ÊôÇÔºàISO 8601ÂΩ¢ÂºèÔºâ */
  createTime: string;
  /** Êõ¥Êñ∞Êó•ÊôÇÔºàISO 8601ÂΩ¢ÂºèÔºâ */
  updateTime: string;
  /** „É¶„Éº„Ç∂„ÉºID */
  userId: string;
  /**
   * Ë°®Á§∫Âêç
   * @nullable
   */
  displayName?: string | null;
  /**
   * „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã
   * @nullable
   */
  sessionState?: VertexAISessionSessionState;
}

export interface VertexAIPart {
  /**
   * „ÉÜ„Ç≠„Çπ„ÉàÈÉ®ÂàÜ
   * @nullable
   */
  text?: string | null;
  [key: string]: unknown;
}

/**
 * Áô∫Ë®ÄËÄÖ„ÅÆÂΩπÂâ≤
 * @nullable
 */
export type VertexAIContentRole =
  | (typeof VertexAIContentRole)[keyof typeof VertexAIContentRole]
  | null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VertexAIContentRole = {
  user: "user",
  model: "model",
} as const;

export interface VertexAIContent {
  /**
   * Áô∫Ë®ÄËÄÖ„ÅÆÂΩπÂâ≤
   * @nullable
   */
  role?: VertexAIContentRole;
  /** „Ç≥„É≥„ÉÜ„É≥„ÉÑÈÉ®ÂàÜ„ÅÆÈÖçÂàó */
  parts: VertexAIPart[];
}

export interface VertexAISessionEvent {
  /** „Ç§„Éô„É≥„Éà„ÅÆÂÆåÂÖ®„Å™„É™„ÇΩ„Éº„ÇπÂêç */
  name: string;
  /** Áô∫Ë®ÄËÄÖ */
  author: string;
  /** Âëº„Å≥Âá∫„ÅóID */
  invocationId: string;
  /** „Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÔºàISO 8601ÂΩ¢ÂºèÔºâ */
  timestamp: string;
  /**
   * „Ç≥„É≥„ÉÜ„É≥„ÉÑ
   * @nullable
   */
  content?: VertexAIContent;
  /**
   * „Ç®„É©„Éº„Ç≥„Éº„Éâ
   * @nullable
   */
  errorCode?: string | null;
  /**
   * „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
   * @nullable
   */
  errorMessage?: string | null;
}

export interface SessionCreateResponse {
  success: boolean;
  /**
   * ‰ΩúÊàê„Åï„Çå„Åü„Çª„ÉÉ„Ç∑„Éß„É≥ID
   * @nullable
   */
  sessionId?: string | null;
  /** @nullable */
  error?: string | null;
}

export interface SessionGetResponse {
  success: boolean;
  /** @nullable */
  session?: VertexAISession;
  /** @nullable */
  error?: string | null;
}

export interface SessionListResponse {
  success: boolean;
  /**
   * „Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ß
   * @nullable
   */
  sessions?: VertexAISession[] | null;
  /**
   * Ê¨°„Éö„Éº„Ç∏„ÅÆ„Éà„Éº„ÇØ„É≥
   * @nullable
   */
  nextPageToken?: string | null;
  /** @nullable */
  error?: string | null;
}

export interface SessionEventListResponse {
  success: boolean;
  /**
   * „Çª„ÉÉ„Ç∑„Éß„É≥„Ç§„Éô„É≥„Éà‰∏ÄË¶ß
   * @nullable
   */
  events?: VertexAISessionEvent[] | null;
  /**
   * Ê¨°„Éö„Éº„Ç∏„ÅÆ„Éà„Éº„ÇØ„É≥
   * @nullable
   */
  nextPageToken?: string | null;
  /** @nullable */
  error?: string | null;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type GetApiSessionsParams = {
  /**
   * „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Áî®„ÅÆ„Éà„Éº„ÇØ„É≥
   */
  pageToken?: string;
};

export type GetApiSessionsSessionIdEventsParams = {
  /**
   * „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Áî®„ÅÆ„Éà„Éº„ÇØ„É≥
   */
  pageToken?: string;
};

/**
 * „Ç®„Éº„Ç∏„Çß„É≥„ÉàÊØé„ÅÆÁô∫Ë®ÄÂàÜÂâ≤„Å´ÂØæÂøú„Åó„Åü„É™„Ç¢„É´„Çø„Ç§„É†„ÉÅ„É£„ÉÉ„ÉàÊ©üËÉΩ„ÄÇ

## ÁâπÂæ¥
- Server-Sent Events (SSE) ÂΩ¢Âºè„Åß„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÈÖç‰ø°
- Ê†ÑÈ§ä„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº„Éª„Åè„Çâ„Åó„Ç¢„Éâ„Éê„Ç§„Ç∂„ÉºÊØé„ÅÆÁô∫Ë®Ä„ÇíÂàÜÈõ¢
- „É™„Ç¢„É´„Çø„Ç§„É†„Å™ÂøúÁ≠îË°®Á§∫

## „É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè
```
data: {"type": "agent_start", "agent_name": "Ê†ÑÈ§ä„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº"}
data: {"type": "chunk", "agent_name": "Ê†ÑÈ§ä„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº", "content": "ÊúùÈ£ü„ÅÆ..."}
data: {"type": "agent_complete", "agent_name": "Ê†ÑÈ§ä„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº", "content": "ÂÆåÂÖ®„Å™„É°„ÉÉ„Çª„Éº„Ç∏"}
data: {"type": "stream_end"}
```

 * @summary „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„ÉÅ„É£„ÉÉ„Éà
 */
export const postApiChatStream = (
  chatRequest: ChatRequest,
  signal?: AbortSignal,
) => {
  return customInstance<string>({
    url: `/api/chat/stream`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: chatRequest,
    signal,
  });
};

export const getPostApiChatStreamMutationOptions = <
  TError = HTTPValidationError | ApiResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiChatStream>>,
    TError,
    { data: ChatRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiChatStream>>,
  TError,
  { data: ChatRequest },
  TContext
> => {
  const mutationKey = ["postApiChatStream"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiChatStream>>,
    { data: ChatRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiChatStream(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiChatStreamMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiChatStream>>
>;
export type PostApiChatStreamMutationBody = ChatRequest;
export type PostApiChatStreamMutationError = HTTPValidationError | ApiResponse;

/**
 * @summary „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„ÉÅ„É£„ÉÉ„Éà
 */
export const usePostApiChatStream = <
  TError = HTTPValidationError | ApiResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiChatStream>>,
      TError,
      { data: ChatRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiChatStream>>,
  TError,
  { data: ChatRequest },
  TContext
> => {
  const mutationOptions = getPostApiChatStreamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Êñ∞„Åó„ÅÑ„ÉÅ„É£„ÉÉ„Éà„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ

## Ê©üËÉΩ
- Ëá™ÂãïÁîüÊàê„Åï„Çå„ÅüsessionId„ÇíËøîÂç¥
- ADK InMemorySessionService „Åæ„Åü„ÅØVertex AI Sessions API‰ΩøÁî®
- FirebaseË™çË®ºÂøÖÈ†à

 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
 */
export const postApiSessions = (signal?: AbortSignal) => {
  return customInstance<SessionCreateResponse>({
    url: `/api/sessions`,
    method: "POST",
    signal,
  });
};

export const getPostApiSessionsMutationOptions = <
  TError = ApiResponse | SessionCreateResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSessions>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiSessions>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postApiSessions"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiSessions>>,
    void
  > = () => {
    return postApiSessions();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiSessionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiSessions>>
>;

export type PostApiSessionsMutationError = ApiResponse | SessionCreateResponse;

/**
 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
 */
export const usePostApiSessions = <
  TError = ApiResponse | SessionCreateResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiSessions>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiSessions>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiSessionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

## Ê©üËÉΩ
- userId„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàËá™ÂãïÈÅ©Áî®Ôºâ
- „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥ÂØæÂøúÔºàpageTokenÔºâ
- Êõ¥Êñ∞Êó•ÊôÇÈ†Ü„Åß„ÇΩ„Éº„Éà

 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ßÂèñÂæó
 */
export const getApiSessions = (
  params?: GetApiSessionsParams,
  signal?: AbortSignal,
) => {
  return customInstance<SessionListResponse>({
    url: `/api/sessions`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiSessionsQueryKey = (params?: GetApiSessionsParams) => {
  return [`/api/sessions`, ...(params ? [params] : [])] as const;
};

export const getGetApiSessionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSessions>>,
  TError = ApiResponse | SessionListResponse,
>(
  params?: GetApiSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiSessions>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiSessionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSessions>>> = ({
    signal,
  }) => getApiSessions(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessions>>
>;
export type GetApiSessionsQueryError = ApiResponse | SessionListResponse;

export function useGetApiSessions<
  TData = Awaited<ReturnType<typeof getApiSessions>>,
  TError = ApiResponse | SessionListResponse,
>(
  params: undefined | GetApiSessionsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiSessions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessions>>,
          TError,
          Awaited<ReturnType<typeof getApiSessions>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessions<
  TData = Awaited<ReturnType<typeof getApiSessions>>,
  TError = ApiResponse | SessionListResponse,
>(
  params?: GetApiSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiSessions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessions>>,
          TError,
          Awaited<ReturnType<typeof getApiSessions>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessions<
  TData = Awaited<ReturnType<typeof getApiSessions>>,
  TError = ApiResponse | SessionListResponse,
>(
  params?: GetApiSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiSessions>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ßÂèñÂæó
 */

export function useGetApiSessions<
  TData = Awaited<ReturnType<typeof getApiSessions>>,
  TError = ApiResponse | SessionListResponse,
>(
  params?: GetApiSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiSessions>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆö„Åï„Çå„Åü„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥Ë©≥Á¥∞ÂèñÂæó
 */
export const getApiSessionsSessionId = (
  sessionId: string,
  signal?: AbortSignal,
) => {
  return customInstance<SessionGetResponse>({
    url: `/api/sessions/${sessionId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiSessionsSessionIdQueryKey = (sessionId: string) => {
  return [`/api/sessions/${sessionId}`] as const;
};

export const getGetApiSessionsSessionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ApiResponse | SessionGetResponse,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiSessionsSessionIdQueryKey(sessionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>
  > = ({ signal }) => getApiSessionsSessionId(sessionId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsSessionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionId>>
>;
export type GetApiSessionsSessionIdQueryError =
  | ApiResponse
  | SessionGetResponse;

export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ApiResponse | SessionGetResponse,
>(
  sessionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionId>>,
          TError,
          Awaited<ReturnType<typeof getApiSessionsSessionId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ApiResponse | SessionGetResponse,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionId>>,
          TError,
          Awaited<ReturnType<typeof getApiSessionsSessionId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ApiResponse | SessionGetResponse,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = ApiResponse | SessionGetResponse,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsSessionIdQueryOptions(
    sessionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆö„Åï„Çå„Åü„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂâäÈô§„Åó„Åæ„Åô„ÄÇ

## Ê≥®ÊÑè
- Áâ©ÁêÜÂâäÈô§ÔºàÂæ©ÂÖÉ‰∏çÂèØÔºâ
- Èñ¢ÈÄ£„Åô„Çã„Ç§„Éô„É≥„ÉàÂ±•Ê≠¥„ÇÇÂâäÈô§„Åï„Çå„Åæ„Åô

 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥ÂâäÈô§
 */
export const deleteApiSessionsSessionId = (sessionId: string) => {
  return customInstance<ApiResponse | void>({
    url: `/api/sessions/${sessionId}`,
    method: "DELETE",
  });
};

export const getDeleteApiSessionsSessionIdMutationOptions = <
  TError = ApiResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
    TError,
    { sessionId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationKey = ["deleteApiSessionsSessionId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
    { sessionId: string }
  > = (props) => {
    const { sessionId } = props ?? {};

    return deleteApiSessionsSessionId(sessionId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiSessionsSessionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiSessionsSessionId>>
>;

export type DeleteApiSessionsSessionIdMutationError = ApiResponse;

/**
 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥ÂâäÈô§
 */
export const useDeleteApiSessionsSessionId = <
  TError = ApiResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
      TError,
      { sessionId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiSessionsSessionIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÊåáÂÆö„Åï„Çå„Åü„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ‰ºöË©±Â±•Ê≠¥Ôºà„Ç§„Éô„É≥„ÉàÔºâ„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

## Ê©üËÉΩ
- ‰ºöË©±Â±•Ê≠¥„ÅÆË©≥Á¥∞Ôºà„É¶„Éº„Ç∂„Éº„Éª„Ç®„Éº„Ç∏„Çß„É≥„ÉàÁô∫Ë®ÄÔºâ
- „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥ÂØæÂøú
- ÊôÇÁ≥ªÂàóÈ†Ü„Åß„ÇΩ„Éº„Éà

 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥„Ç§„Éô„É≥„ÉàÂ±•Ê≠¥ÂèñÂæó
 */
export const getApiSessionsSessionIdEvents = (
  sessionId: string,
  params?: GetApiSessionsSessionIdEventsParams,
  signal?: AbortSignal,
) => {
  return customInstance<SessionEventListResponse>({
    url: `/api/sessions/${sessionId}/events`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiSessionsSessionIdEventsQueryKey = (
  sessionId: string,
  params?: GetApiSessionsSessionIdEventsParams,
) => {
  return [
    `/api/sessions/${sessionId}/events`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiSessionsSessionIdEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
  TError = ApiResponse | SessionEventListResponse,
>(
  sessionId: string,
  params?: GetApiSessionsSessionIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiSessionsSessionIdEventsQueryKey(sessionId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>
  > = ({ signal }) => getApiSessionsSessionIdEvents(sessionId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsSessionIdEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>
>;
export type GetApiSessionsSessionIdEventsQueryError =
  | ApiResponse
  | SessionEventListResponse;

export function useGetApiSessionsSessionIdEvents<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
  TError = ApiResponse | SessionEventListResponse,
>(
  sessionId: string,
  params: undefined | GetApiSessionsSessionIdEventsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdEvents<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
  TError = ApiResponse | SessionEventListResponse,
>(
  sessionId: string,
  params?: GetApiSessionsSessionIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdEvents<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
  TError = ApiResponse | SessionEventListResponse,
>(
  sessionId: string,
  params?: GetApiSessionsSessionIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „Çª„ÉÉ„Ç∑„Éß„É≥„Ç§„Éô„É≥„ÉàÂ±•Ê≠¥ÂèñÂæó
 */

export function useGetApiSessionsSessionIdEvents<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
  TError = ApiResponse | SessionEventListResponse,
>(
  sessionId: string,
  params?: GetApiSessionsSessionIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdEvents>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsSessionIdEventsQueryOptions(
    sessionId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
